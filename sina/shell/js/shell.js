function ArrayList(unique){ this.unique=unique;this.arr=[];  this.add=function(v,index){ if(this.unique){ var oldIndex=this.indexOf(v); if(oldIndex>=0){ this.set(v,index); return true; } }  if('undefined'==typeof(index)){ this.arr.push(v); }else{ var size=this.arr.length; if(index<0||index>size) return false;  if(index==size) this.arr.push(v); else{ this.arr=System.arraycopy(this.arr, index, this.arr, index+1,size-index); this.arr[index]=v; } } return true; };  this.push=function(v,index){ return this.add(v,index); };  this.set=function(v,index){ if(index<0) return this; if(index>=this.arr.length) return this; this.arr[index]=v; return this; };  this.get=function(i){ if(i<0||i>=this.arr.length) return null; return this.arr[i]; };  this.removeObj=function(obj){ var res=null; var arrn=[]; for(var i=0 ; i<this.arr.length; i ++){ try{ var ti=this.arr[i]; if((!isNaN(obj)&&ti!=obj)||(isNaN(obj)&&!obj.equals(ti))){ arrn.push(this.arr[i]); } else{ res=this.arr[i]; } }catch(E){  } } this.arr=arrn; return res; };  this.remove=function(index){ if(index<0||index>=this.arr.length) return null; var res=this.arr[i]; this.arr.splice(index,1); return res; };  this.toArray=function(){ return this.arr; };  this.addAll=function(v){ var len=this.arr.length; if(v instanceof ArrayList){ var array=v.toArray(); return this.addAllArray(array); } return len === this.arr.length; };  this.addAllArray=function(v){ var len=this.arr.length; if(v instanceof Array){ for(var i in v){ this.add(v[i]); } } return len === this.arr.length; };  this.contains=function(obj){ return this.indexOf(obj)>=0; };  this.indexOf=function(obj){ if(!obj) return false; for(var i in this.arr){ var o=this.arr[i]; if(o==obj) return i; try{ if(o.equals(obj)) return i; }catch(E){} if(Objects.equals(o,obj)) return i; } return -1; };  this.clear=function(){ this.arr=[]; };  this.size=function(){ return this.arr.length; };  this.isEmpty=function(){ return 0 === this.arr.length; };  this.toJSONArray=function(){ var arr=new JSONArray(); return arr.parse(this); }; } function JSONObject(){ this.obj={};  this.put=function(k,v){ eval("this.obj."+k+"='"+v+"'"); };  this.opt=function(k){ return eval("this.obj."+k); };  this.optString=function(k){ return this.opt(k); };  this.optInt=function(k,def){ var val=def||0; try{ var res=parseInt(eval("this.obj."+k)); if(isNaN(res)) return val; return res; }catch(E){} return val; };  this.optFloat=function(k,def){ var val=def||0; try{ var res=parseFloat(eval("this.obj."+k)); if(isNaN(res)) return val; return res; }catch(E){} return val; };  this.get=function(k){ return this.opt(k); };  this.toJsonObject=function(){ return this.obj; };  this.toString=function(){ return JSON.stringify(this.obj); };  this.parse=function(json){ if(typeof json=='object'){ this.obj=json; return this; }  this.obj=eval("("+json+")"); return this; };  this.isEmpty=function(){ return 0 === this.keys().length; };  this.keys=function(){ var o=this.obj; var arr=[]; for(var i in o){ arr.push(i); } return arr; }; }   function JSONArray(){ this.list=new ArrayList();  this.put=function(v){ this.list.add(v); };  this.has=function(v){ return this.list.contains(v); };  this.length=function(){ return this.list.size(); };  this.opt=function(index){ return this.list.get(index); };  this.get=function(index){ return this.opt(index); }; this.toString=function(){ return JSON.stringify(this.list.arr); }; this.parse=function(jsonArr){ if(jsonArr instanceof ArrayList) this.list=jsonArr; else this.list.arr=JSON.parse(jsonArr+""); return this; }; this.asList=function(){ return this.list; };  this.isEmpty=function(){ return this.length==0; }; } function Entry(key, value) { this.key=key; this.value=value;  this.getKey=function(){ return this.key; }; this.getValue=function(){ return this.value; }; }  function Map() { this.index=-1; this.entrys=new Array(10); this.get=function(key) { if (this.index==-1) { return null; } for (var i=0; i<=this.index; i++) { var entry=this.entrys[i]; if (entry.key==key) { return entry.value; } } return null; }; this.size=function() { return this.index+1; }; this.containsKey=function(key) { if (this.index==-1) { return false; } for (var i=0; i<=this.index; i++) { var entry=this.entrys[i]; if (entry.key==key) { return true; } } return false; }; this.containsValue=function(value) { if (this.index==-1) { return false; } for (var i=0; i<=this.index; i++) { var entry=this.entrys[i]; if (entry.value==value) { return true; } } return false; };  this.put=function(key, value) { var val=null; if (this.containsKey(key)) { val=this.get(key); this.remove(key); } this.index++; this.entrys[this.index]=new Entry(key, value); return val; };  this.putIfAbsent=function(key, value){ var v=this.get(key); if(null==v){ this.put(key,value); } };  this.getOrDefault=function(key,def){ var v=this.get(key); return null==v ? def:v; };  this.keySet=function() { if (this.index==-1) return null;  var keys=new ArrayList(true); for (var i=0; i<=this.index; i++) { keys.add(this.entrys[i].key); } return keys; };  this.values=function() { if (this.index==-1) { return null; } var value=new ArrayList(); for (var i=0; i<=this.index; i++) { value.add(this.entrys[i].value); } return value; }; this.clear=function() { if (this.index!=-1) { for (var i=0; i<=this.index; i++) { this.entrys[i]=null; } this.index=-1; } }; this.remove=function(key) { if (this.index==-1) { return null; } var po=-1; var flag=false; for (var i=0; i<=this.index; i++) { var entry=this.entrys[i]; if (entry.key==key) { po=i; if (i==this.index) { po=-1; } flag=true; } if (po!=-1) { this.entrys[po]=this.entrys[po+1]; po++; } } if (flag) { this.index=this.index-1; } };  this.isEmpty=function() { return -1==this.index; };  this.entrySet=function() { if (this.index==-1) { return null; } var entry=new ArrayList(); for (var i=0; i<=this.index; i++) { entry.add(this.entrys[i]); } return entry; }; } var Arrays={ sort  :function(arr,desc){  },  asList  :function(arr){ if(null==arr||arr.length<1) return null; var res=new ArrayList(); for(var i=0; i<arr.length; i ++){ res.add(arr[i]); } return res; },  binarySearch:function(arr,key,fromIndex,toIndex){ var low='undefined'==typeof fromIndex ? 0:fromIndex; var high='undefined'==typeof (toIndex) ? arr.length:toIndex-1;  while (low<=high) { var mid=(low+high) >>> 1; var midVal=arr[mid];  if (midVal<key) low=mid+1; else if (midVal>key) high=mid-1; else return mid; } return -(low+1);  },  fill  :function(arr,val){ if(null==arr) return; for(var i=0; i<arr.length; i ++){ arr[i]=val; } },  reverse  :function(arr){ var len=0; if(null==arr||1==(len=arr.length)){ return arr; } var tmp=[]; for(var i=len-1; i>0; i ++){ tmp.push(arr[i]); } return tmp; } }; var System={ arrayDel:function(src,pos){ if(!src) return null; if(pos>=src.length||pos<0) return src; src.splice(pos,1); return src; }, arraycopy:function(src, srcPos, dest, destPos, length){ if(length<1) return;  if(!(src instanceof Array)) return; if(!(dest instanceof Array)) return;  var srcArrLen=src.length; if(srcPos<0||srcPos>=srcArrLen) return;  var destArrLen=dest.length; if(destArrLen<destPos) return;  var res=[];  for(var i=0; i<destPos; i ++){ res.push(dest[i]); }  for(var i=0 ; i<length; i ++){ res.push(src[srcPos+i]); }  var resArrLen=res.length;  if(dest.length>resArrLen){ for(var i=resArrLen; i<dest.length; i ++){ res.push(dest[i]); } }  return res; }, }; function StringBuilder(str){ this.str=str||'';  this.init=function(str){ this.str=str; return this; };  this.append=function(s){ this.str += s; return this; };  this.newLine=function(){ this.str += "<br>"; return this; };  this.indexOf=function(v){ return this.str.indexOf(v); };  this.endsWith=function(v){ if('string'!=typeof v) return false; return this.startsWith(v, this.str.length-v.length); };  this.deleteCharAt=function(index){ if(index<0) return this; if(index>=this.str.length) return this;  var tmp=this.str.substring(0,index)+this.str.substring(index+1); this.str=tmp; return this; };  this.deleteCharAtLast=function(){ return this.deleteCharAt(this.str.length-1); };  this.deleteCharAtFirstt=function(){ return this.deleteCharAt(0); };  this.startsWith=function(v,idx){ if('string'!=typeof v){ return false; } try{ var tmp=this.str.substring(idx); return 0 === tmp.indexOf(v); }catch(E){alert(E)} return 0 === this.str.indexOf(v); };  this.charAt=function(v){ return this.str.charAt(v); };  this.replace=function(o,n){ this.str=this.str.replace(o,n); return this.str; };  this.toString=function(){ return this.str; }; } function StringJoiner(delimiter,prefix,suffix){ this.delimiter=delimiter||""; this.prefix=prefix||""; this.suffix=suffix||"";  this.value=null; this.emptyValue=this.prefix+this.suffix;  this.add=function(newElement){ this.prepareBuilder().append(newElement); return this; };  this.toString=function(){ if (this.value==null) { return this.emptyValue; } else { if (this.suffix=="") { return this.value.toString(); } else { var result=this.value.append(this.suffix).toString(); return result; } } };  this.prepareBuilder=function(){ if (this.value!=null) { this.value.append(this.delimiter); } else { this.value=new StringBuilder().append(this.prefix); } return this.value; }; } function StringJoiner(delimiter,prefix,suffix){ this.delimiter=delimiter||""; this.prefix=prefix||""; this.suffix=suffix||"";  this.value=null; this.emptyValue=this.prefix+this.suffix;  this.add=function(newElement){ this.prepareBuilder().append(newElement); return this; };  this.toString=function(){ if (this.value==null) { return this.emptyValue; } else { if (this.suffix=="") { return this.value.toString(); } else { var result=this.value.append(this.suffix).toString(); return result; } } };  this.prepareBuilder=function(){ if (this.value!=null) { this.value.append(this.delimiter); } else { this.value=new StringBuilder().append(this.prefix); } return this.value; }; } 